name: basictest
on:
  push:
  pull_request:

# Workflow which pip installs the source code and checks that both bundles build
# and runs tests in both release and debug mode.

jobs:
  build:
    strategy:
      matrix:
        include:
          - { os: ubuntu-20.04,  CC: gcc-10,   CXX: g++-10,     python: '3.8'  }
          - { os: ubuntu-22.04,  CC: gcc,      CXX: g++,        python: '3.9'  }
          - { os: ubuntu-latest, CC: gcc,      CXX: g++,        python: '3.10' }
          - { os: ubuntu-latest, CC: clang,    CXX: clang++,    python: '3.11' }
          - { os: ubuntu-latest, CC: gcc-12,   CXX: g++-12,     python: '3.11' }
          - { os: macos-11,      CC: clang,    CXX: clang++,    python: "3.10" }
          - { os: macos-12,      CC: clang,    CXX: clang++,    python: "3.11" }
          - { os: macos-13,      CC: clang,    CXX: clang++,    python: "3.12" }
          #- { os: macos-13,      CC: clang,    CXX: clang++,    python: "3.11" }
    name: ${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -eux {0}
    env:
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}

    - name: Pip install cmake and pybind11
      run: |
           python3 -m pip install pybind11
           python3 -m pip install cmake
           which python3
           python3 --version
           python3 -mpybind11 --version
           which cmake
           cmake --version

    - name: Lint python
      run: |
           python3 -m pip install ruff
           ./src/devel/ruff.x

    - name: Install package
      run: |
           python3 -m pip install ./src
           echo "sb --version:"
           sb --version

    - name: Build-and-test-release-mode
      run: |
           mkdir myproj
           cd myproj
           sb --init core_val
           sb -t --testexcerpts=100
           sbenv sb_core_extdeps --require-disabled NCrystal Numpy matplotlib Geant4 ZLib

    - name: Build-and-test-debug-mode
      run: |
           mkdir myprojdebug
           cd myprojdebug
           sb --init core_val DEBUG COMPACT
           sb -t --testexcerpts=100
           sbenv sb_core_extdeps --require-disabled NCrystal Numpy matplotlib Geant4 ZLib
           #Also verify that eval "$(sb --env-setup)" works:
           eval "$(sb --env-setup)"
           python3 -c 'import _simple_build_system.envsetup as sbe; sbe.verify_env_already_setup()'
